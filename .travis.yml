# Authors: see AUTHORS.md at project root.
# CopyPolicy: released under the terms of the LGPLv2.1, see LICENSE at project root.
# URL: https://github.com/asrob-uc3m/yarp-devices

language: cpp
dist: trusty
sudo: required
os: linux

compiler:
  - gcc
  - clang

env:
  global:
    - YARP_VER=2.3.72
    - YARP_CACHE_DIR=~/.yarp

cache:
  directories:
    - $YARP_CACHE_DIR

branches:
  except:
  - /^.*appveyor.*$/

before_install:
  - sudo apt-get -qq update
  - if [ ! `git config --get user.email` ]; then `git config --global user.email 'user@example.com'`; fi
  - if [ ! `git config --get user.name` ]; then `git config --global user.name 'Travis CI'`; fi
  - '[[ "$TRAVIS_EVENT_TYPE" = cron ]] && export YARP_CHECKOUT=devel || export YARP_CHECKOUT=master'
  - export YARP_CMAKE_OPTIONS="-DSKIP_ACE=ON"

install:
  # Install LibSerial
  - sudo apt-get install libserial-dev

  # Clone and build YARP if not in cache
  - >-
    if [ "$TRAVIS_EVENT_TYPE" = cron ]; then
      echo "Cloning YARP's devel branch"
      cd
      git clone --depth=1 --branch=devel https://github.com/robotology/yarp
      mkdir -p yarp/build && cd "$_"
      cmake .. $YARP_CMAKE_OPTIONS
      sudo make -j$(nproc) install
    elif [ ! "$(ls -A "$YARP_CACHE_DIR")" ] || [ ! -f "$YARP_CACHE_DIR/.version" ] || [ ! $(cat "$YARP_CACHE_DIR/.version") = "$YARP_VER" ]; then
      echo "YARP not in cache or wrong version"
      rm -rf "$YARP_CACHE_DIR"/*
      cd
      wget -qO- "https://github.com/robotology/yarp/archive/v$YARP_VER.tar.gz" | tar xz
      mkdir -p "yarp-$YARP_VER/build" && cd "$_"
      cmake .. -DCMAKE_INSTALL_PREFIX:PATH="$YARP_CACHE_DIR" $YARP_CMAKE_OPTIONS
      sudo make -j$(nproc) install
      echo "$YARP_VER" > "$YARP_CACHE_DIR/.version"
    else
      echo "YARP directory found in cache (version $(cat "$YARP_CACHE_DIR/.version"))"
    fi

  # Make installed YARP discoverable by CMake's find_package() command
  - if [ ! "$TRAVIS_EVENT_TYPE" = cron ]; then export YARP_DIR=$YARP_CACHE_DIR/lib/cmake/YARP; fi

before_script:
  - mkdir -p "$TRAVIS_BUILD_DIR/build" && cd "$_"
  - cmake .. -DENABLE_coverage=ON

script:
  - make
  - sudo make install

after_success:
  - sudo make uninstall
